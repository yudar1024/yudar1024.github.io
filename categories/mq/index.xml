<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mq on 陈sir 的流水帐</title>
    <link>https://yudar1024.github.io/categories/mq/</link>
    <description>Recent content in mq on 陈sir 的流水帐</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 23 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yudar1024.github.io/categories/mq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kafka 深入理解</title>
      <link>https://yudar1024.github.io/blog/kafka-deep/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yudar1024.github.io/blog/kafka-deep/</guid>
      <description>kafka 服务端 协议 在2.0版本中支持43中协议，每种协议包含相同的请求头和不同的请求体。
请求头 请求头包含四个字段
   字段 说明     api_key api标识 比如 produce fetch等。说明需要执行的动作   api_version api 版本号   corelation_id 由客户端生成的请求id（全局唯一），服务端（broker）在处理完请求后也会把相同的id写回   client_id 客户端id    produce request 结构 produce request 结构produce request 字段说明消息处理过程
sender线程从消息累加器中获取消息&amp;gt;，将消息转换为&amp;gt;的格式。
如果acks 的值为非0，客户端将异步等待服务端的相应（ProduceResponse）
produce response 结构 响应结构响应结构说明Fetch 请求/响应的结构 时间轮（timingwheel） 时间轮是一个存储定时任务的环形队列，底层采用数组实现。数组中的每个元素存放一个定时任务列表（TimerTaskList）。TimerTaskList是一个双向链表，链表中的每个元素表示一个任务项（TimerTaskEntry）封装了真正的任务（TimerTask）</description>
    </item>
    
    <item>
      <title>kafka 概念介绍</title>
      <link>https://yudar1024.github.io/blog/kafka-introduce/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yudar1024.github.io/blog/kafka-introduce/</guid>
      <description>kafka 基础概念 基础概念  Producer: 消息发送者 broker： kafka节点 consumer: 消费者 topic： 主题，一组消息的集合，分布在多个分区里 partition：分区， 一个分区只能属于一个主题。在存储曾铭，分区可以看做一个可追加log日志文件，每个消息在分区中表现为一条日志，而消息的位置，通过offset 来记录，offset 是消息在分区分区中的唯一标示，offset保证消息的顺序性，注意，offset 不跨分区，在不同的分区中，offset 可能相同。 replica：副本，对分区的冗余，会尽量分布在不同的节点。一个分区会有leader 和 follower 两种角色的副本。 AR（assignded-replica）：分区中的所有副本统称为AR ISR (in-sync replica)：与 leader 副本保持一定程度同步的副本成为 ISR， ISR 是AR 的子集。 OSR (out-of-sync replica)：与leader 同步滞后达到一定程度的副本，这个一定程度可以通过参数进行设置。AR=ISR+OSR HW(high watermark 高水位)：指一个特殊的OFFSET，消费者，只能获取HW 这个offset 之前的消息，即便HW 之后有其他消息，对消费者而言也是不可见的。（与ISR 强相关） LSO(logstartoffset)：消息开始的初始offset，值为0 LEO(logendoffset)：当前分区中，下一条待写入消息的offset。  offset消息处理 消息的发送过程 producer-&amp;gt; 拦截器（非必须） -&amp;gt; 序列化器 -&amp;gt; 分区器- broker
producer-flow消息投递方式 P2P , PUB/SUB kafka 通过消费者组和消费者来适配两种模式
如果所有的消费者头隶属于同一个消费者组，那么消息只会投递给其中一个消费者，相当于P2P模式
如果消费者隶属于不同的消费者组，那么消息会发送给所有的消费者组。适配PUB/SUB模式</description>
    </item>
    
  </channel>
</rss>